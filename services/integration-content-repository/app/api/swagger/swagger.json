{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the API for the Open Integration Hub Microservice \"Integration Content Repository\"\n[http://openintegrationhub.de](http://openintegrationhub.de)\n",
    "version": "0.0.1",
    "title": "Integration Content Repository",
    "termsOfService": "http://openintegrationhub.de/terms/",
    "contact": {
      "email": "hschmidt@wice.de"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "flows",
      "description": "Flow management",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://openintegrationhub.de"
      }
    }
  ],
  "paths": {
    "/flows": {
      "get": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Retrieve all flows associated with the current user from the repository",
        "description": "This will only return Flows that are either directly associated with the user, or that are associated with a tenant that the user is also a member of.",
        "operationId": "getFlows",
        "parameters": [
          {
          "name": "page[size]",
          "in": "query",
          "description": "Amount of flows per page returned. Default is 10.",
          "required": false,
          "schema": {
            "type": "integer"
            }
          },
          {
          "name": "page[number]",
          "in": "query",
          "description": "Number of the page to be returned. Default is 1.",
          "required": false,
          "schema": {
            "type": "integer"
            }
          },
          {
          "name": "filter[has_draft]",
          "in": "query",
          "description": "Filter results by flow draft. Draft = 1. No draft = 0",
          "required": false,
          "schema": {
            "type": "integer"
            }
          },
          {
          "name": "filter[status]",
          "in": "query",
          "description": "Filter results by flow status. Active = 1. Inactive = 0",
          "required": false,
          "schema": {
            "type": "integer"
            }
          },
          {
          "name": "filter[type]",
          "in": "query",
          "description": "Filter results by flow type (ordinary, long_running)",
          "required": false,
          "schema": {
            "type": "string"
            }
          },
          {
          "name": "filter[user]",
          "in": "query",
          "description": "Filter by user. Works for admin or users with same tenant.",
          "required": false,
          "schema": {
            "type": "string"
            }
          },
          {
          "name": "sort",
          "in": "query",
          "description": "Sort the result by one property. Supported: createdAt, updatedAt and name. Prefix field name with - for reversed sort order (DESC) i.e. sort=-updatedAt. Default sorting is by id DESC",
          "required": false,
          "schema": {
            "type": "string"
            }
          },
          {
          "name": "search",
          "in": "query",
          "description": "Search flows by a word or a phrase contained in the flow description OR in the flow name (case-insensitive). Behavior is similar to operator LIKE in SQL but case insensitive.",
          "required": false,
          "schema": {
            "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of flows.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "404": {
            "description": "No flows associated with the current user could be found in the repository."
          }
        }
      },
      "post": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Add a new flow to the repository",
        "description": "The new Flow will automatically be associated with the current user in the owners array, allowing editing and viewing by this user irrespective of tenancies.",
        "operationId": "addFlow",
        "responses": {
          "201": {
            "description": "The newly created Flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableFlow"
              }
            }
          },
          "description": "A Flow object to be added to the repository.",
          "required": true
        }
      }
    },
    "/flows/{id}": {
      "get": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Find Flow by ID",
        "description": "Returns a single Flow by its ID, if the user is authorized to see it.",
        "operationId": "getFlowById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "404": {
            "description": "No Flow with this id was found."
          }
        }
      },
      "delete": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "tags": [
          "flows"
        ],
        "summary": "Deletes a flow",
        "description": "Entirely deletes a Flow from the repository. This cannot be reverted.",
        "operationId": "deleteFlow",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow id to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flow was successfully deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No Flow with this id was found."
          }
        }
      },
      "patch": {
        "x-swagger-router-controller": "flow",
        "security": [
          {
            "Bearer": [

            ]
          }
        ],
        "tags": [
          "flows"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of flow to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "summary": "Update an existing flow",
        "description": "The id is used to match the existing Flow that will be updated.",
        "operationId": "updateFlow",
        "responses": {
          "200": {
            "description": "The updated Flow.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flow"
                }
              }
            }
          },
          "404": {
            "description": "Flow not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MutableFlow"
              }
            }
          },
          "description": "Flow object containing the desired new values.",
          "required": true
        }
      }
    },
    "/healthcheck": {
      "get": {
        "x-swagger-router-controller": "healthcheck",
        "security": [],
        "tags": [
          "healthcheck"
        ],
        "summary": "Performs a healthcheck",
        "description": "This will return 200 and a JSON object with relevant status information when the service is running and healthy.",
        "responses": {
          "200": {
            "description": "A list of flows.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "pass"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about the Integration Content Repository",
    "url": "https://github.com/openintegrationhub"
  },
  "servers": [
    {
      "url": "http://icr.openintegrationhub.com/"
    },
    {
      "url": "http://localhost:3001/"
    }
  ],
  "components": {
    "requestBodies": {
      "addTenantToFlow": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tenantId": {
                  "description": "ID of the tenant",
                  "type": "string",
                  "format": "string"
                }
              }
            }
          }
        }
      },
      "addEdge": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "mapper_type": {
                  "description": "mapper type of the edge",
                  "type": "string",
                  "format": "string"
                },
                "condition": {
                  "description": "condition of the edge",
                  "type": "string",
                  "format": "string"
                },
                "mapper_to": {
                  "description": "where the edge leads to",
                  "type": "string",
                  "format": "string"
                },
                "mapper_subject": {
                  "description": "name of the mapper",
                  "type": "string"
                },
                "mapper_textbody": {
                  "description": "Mapper details like Adress. Street",
                  "type": "string"
                },
                "source": {
                  "description": "Name of the edge's source",
                  "type": "string"
                },
                "target": {
                  "description": "Name of the edge's target",
                  "type": "string"
                }
              },
              "required": [
                "mapper_type",
                "condition"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "Enter the bearer token received by IAM"
      }
    },
    "schemas": {
      "MutableFlow": {
        "type": "object",
        "required": [
          "name",
          "graph",
          "status",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "My Flow"
          },
          "description": {
            "type": "string",
            "example": "My Flow"
          },
          "graph": {
            "$ref": "#/components/schemas/FlowGraph"
          },
          "type": {
            "type": "string",
            "description": "Flow type",
            "enum": [
              "ordinary",
              "realtime"
            ]
          },
          "owners":{
            "type": "array",
            "items":{
              "$ref": "#/components/schemas/Owner"
            }
          }
        }
      },
      "Flow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MutableFlow"
          },
          {
            "type": "object",
            "required": [
              "id",
              "status",
              "createdAt",
              "updatedAt"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "description": "Flow status",
                "enum": [
                  "active",
                  "inactive"
                ]
              },
              "createdAt": {
                "type": "string",
                "description": "Flow creation time",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "description": "Flow update time",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "FlowGraph": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "componentId",
                "command"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "componentId": {
                  "type": "string"
                },
                "command": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "fields": {
                  "type": "object"
                }
              }
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "source",
                "target"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "config": {
                  "type": "object",
                  "properties": {
                    "condition": {
                      "type": "string"
                    },
                    "mapper": {
                      "type": "object"
                    }
                  }
                },
                "source": {
                  "type": "string"
                },
                "target": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Meta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page (1-based numbering)"
          },
          "perPage": {
            "type": "integer",
            "description": "Number of objects per page"
          },
          "total": {
            "type": "integer",
            "description": "Total number of objects"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          }
        }
      },
      "Owner": {
		    "type": "object",
		    "required": [
			    "id",
			    "type"
		    ],
		    "properties": {
			    "id": {
				    "type": "string",
				    "description": "External id of the owner"
			    },
			    "type": {
				    "type": "string",
				    "description": "Type to discriminate owner's type"
			    }
		    }
	    }
    }
  }
}
