/* eslint no-unused-expressions: "off" */
/* eslint no-underscore-dangle: "off" */
/* eslint max-len: "off" */
/* eslint consistent-return: "off" */
/* eslint class-methods-use-this: "off" */

const express = require('express');

const swaggerUi = require('swagger-ui-express');
const iamMiddleware = require('@openintegrationhub/iam-utils');
const cors = require('cors');
const config = require('./config/index');
const logs = require('./api/controllers/log');
const push = require('./api/controllers/push');
const healthcheck = require('./api/controllers/healthcheck');
const swaggerDocument = require('./api/swagger/swagger.json');

const log = require('./config/logger');

// const receiver = require('./api/utils/receive.module.js');
const eventBus = require('./api/utils/eventBus.js');

class Server {
  constructor() {
    this.app = express();
    this.app.disable('x-powered-by');
    this.app.use(cors());
    this.app.options('*', cors());
    global.queueHealth = false;
  }

  setupMiddleware() {
    log.info('Setting up middleware...');
    // This middleware simple calls the IAM middleware to add user data to req.
    this.app.use('/logs', async (req, res, next) => {
      try {
        await iamMiddleware.middleware(req, res, next);
      } catch (error) {
        return res.status(401).send(`Authentication middleware failed with error: ${error}`);
      }
    });


    // This middleware compiles the relevant membership ids generated by the IAM iam middleware and passes them on
    this.app.use('/logs', async (req, res, next) => {
      // Checks whether iam middleware successfully added Heimdal object
      if (!req.__HEIMDAL__) {
        return res.status(401).send('Authentication middleware did not find memberships');
      }

      if (this.mongoose.connection.readyState !== 1) {
        return res.status(401).send(`NO DB. Please try again later [${this.mongoose.connection.readyState}] `);
      }

      // local copy of the user object
      const user = req.__HEIMDAL__;

      // A flag that shows the current user is an OIH admin, allowing them to see all logs irrespective of ownership
      if (config.oihViewerRoles.includes(user.role)) {
        res.locals.admin = true;
      }

      // Array containing all the user's tenants
      let credentials = [];

      if (config.usePermissions) {
        if (user.permissions.includes(config.logReadPermission)) {
          credentials[1].push(user.sub);
        }

        if (user.permissions.includes(config.logWritePermission)) {
          credentials[0].push(user.sub);
        }

        // Pushes the ids of the tenants to the credentials array. If the user role allows writing of tenant logs, the id is pushed to the read/write and the read rows of the array. Otherwise the id is pushed only to the read row.
        for (let i = 0; i < user.memberships.length; i += 1) {
          if (user.memberships[i].permissions.includes(config.logReadPermission)) {
            credentials[1].push(user.memberships[i].tenant);
          }
          if (user.memberships[i].permissions.includes(config.logWritePermission)) {
            credentials[0].push(user.memberships[i].tenant);
          }
        }
      } else {
        // Adds the user's id to the credentials array, meaning that the user can always create logs, and view and edit those they have personally created.

        credentials = [[user.tenant]];

        // Pushes the ids of the tenants to the credentials array.
        for (let i = 0; i < user.memberships.length; i += 1) {
          credentials.push(user.memberships[i].tenant);
        }

        res.locals.credentials = credentials; // Passes on the tenancies that the user is a member of
        return next();
      }
    });

    log.info('Middleware set up');
  }

  setupRoutes() {
    log.info('Setting routes...');

    // configure routes
    this.app.use('/logs', logs);
    this.app.use('/logs', push);

    this.app.use('/healthcheck', healthcheck);

    // Reroute to docs
    this.app.use('/docs', (req, res) => {
      res.redirect('/api-docs');
    });

    // Extremely rudimentary error handler. TODO: Make it less rudimentary
      this.app.use(function (err, req, res, next) { // eslint-disable-line
      log.error(err);
      return res.status(err.status).send(err.message);
    });

    log.info('Routes set');
  }

  async setup(mongoose) {
    log.info('Connecting to MongoDB...');
    // Configure MongoDB
    // Use the container_name, bec containers in the same network can communicate using their service name
    try {
      this.mongoose = mongoose;

      const options = {
        keepAlive: 1, connectTimeoutMS: 30000, reconnectInterval: 1000, reconnectTries: Number.MAX_VALUE, useNewUrlParser: true,
      }; //

      // Will connect to the mongo container by default, but to localhost if testing is active
      mongoose.connect(config.mongoUrl, options);

      // Get Mongoose to use the global promise library
    mongoose.Promise = global.Promise;  // eslint-disable-line
      // Get the default connection
      this.db = mongoose.connection;
      // Bind connection to error event (to get notification of connection errors)
      this.db.on('error', console.error.bind(console, 'MongoDB connection error:'));
      log.info('Successfully connected to MongoDB');
    } catch (e) {
      log.error(e);
    }
  }

  startListening() {
    log.info('Establishing connection to queue...');

    try {
      // receiver.connect();
      eventBus.connectQueue();
    } catch (error) {
      log.error(error);
    }
    global.queueHealth = true;
    log.info('Connected to queue');
  }

  setupSwagger() {
    log.info('Generating Swagger documentation');
    // Configure the Swagger-API
    /*eslint-disable */
        var config = {
          appRoot: __dirname, // required config

          // This is just here to stop Swagger from complaining, without actual functionality

          swaggerSecurityHandlers: {
            Bearer: function (req, authOrSecDef, scopesOrApiKey, cb) {
              if (true) {
                cb();
              } else {
                cb(new Error('access denied!'));
              }
            }
          }
        };
        /* eslint-enable */

    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, { explorer: true }));
  }

  listen(port) {
    const cport = typeof port !== 'undefined' ? port : 3007;
    log.info(`Opening port ${cport}`);
    return this.app.listen(cport);
  }
}

module.exports = Server;
